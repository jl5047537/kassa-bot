import logging
import os
import hashlib
import re
from typing import Optional, Tuple
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils import executor
from bot.database import db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def validate_field(field: str, value: str) -> tuple[bool, str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª–µ–π"""
    if field == "phone":
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã)
        if not re.match(r'^\d{10}$', value):
            return False, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ 10 —Ü–∏—Ñ—Ä –±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 9991234567). –¢–µ–ª–µ–≥—Ä–∞–º —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –∑–∞–ø–∏—Å–Ω—É—é –∫–Ω–∏–∂–∫—É."
    elif field in ["first_name", "last_name"]:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (—Ç–µ–ø–µ—Ä—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ü–∏—Ñ—Ä)
        if not re.match(r'^[–∞-—è–ê-–Ø—ë–Åa-zA-Z0-9\s-]+$', value):
            return False, "‚ùå –ò–º—è/–§–∞–º–∏–ª–∏—è –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã"
    elif field == "username":
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        if not re.match(r'^[a-zA-Z0-9_]+$', value):
            return False, "‚ùå Username –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è"
    return True, ""

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv('TELEGRAM_BOT_TOKEN'))
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class UserStates(StatesGroup):
    waiting_for_phone = State()
    waiting_for_field_value = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard(user_id: str = None):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    
    if user_id:
        user = db.get_user(user_id)
        if user and user.get('level', 0) > 0:
            # –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—É—Ä–æ–≤–µ–Ω—å > 0)
            keyboard.add(KeyboardButton("üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –î—Ä—É–∑–µ–π"))
            keyboard.add(KeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å"))
            keyboard.add(KeyboardButton("‚ùì –ü–æ–º–æ—â—å"))
        else:
            # –î–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            keyboard.add(KeyboardButton("üîë –°—Ç–∞—Ä—Ç–æ–≤—ã–π –ö–ª—é—á"))
            keyboard.add(KeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å"))
    else:
        # –ï—Å–ª–∏ user_id –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard.add(KeyboardButton("üîë –°—Ç–∞—Ä—Ç–æ–≤—ã–π –ö–ª—é—á"))
        keyboard.add(KeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å"))
    
    return keyboard

def get_registration_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üîë –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", request_contact=True))
    return keyboard

def get_referral_id(phone_number):
    if not phone_number:
        return "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    phone_bytes = phone_number.encode('utf-8')
    hash_object = hashlib.md5(phone_bytes)
    hash_hex = hash_object.hexdigest()
    return hash_hex[:8]

def get_admin_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"))
    keyboard.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ê–¥–º–∏–Ω–∞"))
    keyboard.add(KeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –ê–¥–º–∏–Ω–∞"))
    keyboard.add(KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –£—Ä–æ–≤–Ω–∏"))
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = str(message.from_user.id)
    username = message.from_user.username
    
    logger.info(f"User started bot: id={user_id}, username={username}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    is_admin = db.is_admin(str(message.from_user.id))
    is_main_admin = db.is_main_admin(str(message.from_user.id))
    
    logger.info(f"Admin check results: is_admin={is_admin}, is_main_admin={is_main_admin}")
    
    if is_admin or is_main_admin:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        keyboard = get_admin_keyboard()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer(
            "üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ü–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—Ö–æ–º!* üåü\n\n"
            "*–ù–∞—à –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ê–¥–º–∏–Ω*, –≤–∞—à–∞ —ç–Ω–µ—Ä–≥–∏—è –∏ –ª–∏–¥–µ—Ä—Å—Ç–≤–æ ‚Äî –Ω–∞—Å—Ç–æ—è—â–∏–π –¥–≤–∏–≥–∞—Ç–µ–ª—å —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞! üöÄ\n"
            "–í—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ ‚Äî –≤—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç–µ!\n\n"
            "*–°–µ–≥–æ–¥–Ω—è —Å–Ω–æ–≤–∞ –≤–∞—à –¥–µ–Ω—å —Ç–≤–æ—Ä–∏—Ç—å –≤–µ–ª–∏–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω—ã!* üî•",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        return

    # –ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é
    args = message.get_args()
    if args:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π ID
        await state.set_state(UserStates.waiting_for_phone.state)
        await state.update_data(referrer_id=args)
        logger.info(f"Saved referrer_id: {args} for user {user_id}")
    else:
        await state.set_state(UserStates.waiting_for_phone.state)
        logger.info(f"No referrer_id for user {user_id}")

    await message.answer(
        "üöÄ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*\n"
        "–¢–≤–æ–π –ø—É—Ç—å –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–±–æ–¥–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–¥–µ—Å—å!\n"
        "–ü—Ä–æ–π–¥–∏ –∫–æ—Ä–æ—Ç–∫—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –Ω–∞—à–µ–π *–ö–∞—Å—Å–µ –í–∑–∞–∏–º–æ–ø–æ–º–æ—â–∏* –∏ –Ω–∞—á–Ω–∏ —Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ—ë —É–≤–µ—Ä–µ–Ω–Ω–æ–µ –±—É–¥—É—â–µ–µ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è. üî•\n"
        "–ì–æ—Ç–æ–≤? –ñ–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ! üëá",
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(
            KeyboardButton("üîë –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è üîë", request_contact=True)
        )
    )

@dp.callback_query_handler(lambda c: c.data == 'register', state='*')
async def process_register_callback(callback_query: CallbackQuery):
    reg_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    reg_keyboard.add(KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True))
    await callback_query.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
        reply_markup=reg_keyboard
    )
    await callback_query.answer("–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!")

@dp.message_handler(lambda message: message.text == "üìä –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: types.Message):
    user = db.get_user(str(message.from_user.id))
    if not user:
        await message.answer(
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å:",
            reply_markup=get_registration_keyboard()
        )
        await UserStates.waiting_for_phone.set()
        return

    ref_id = get_referral_id(user['phone_number'])
    referrals_count = db.get_referrals_count(str(message.from_user.id))
    current_level = user.get('level', 0)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —É—Ä–æ–≤–Ω—è–º–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    levels_text = ""
    level_requirements = {
        4: 4,    # –ù–∞—á–∏–Ω–∞—é—â–∏–π
        3: 16,   # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π
        2: 64,   # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª
        1: 256   # –≠–∫—Å–ø–µ—Ä—Ç
    }
    
    for level in range(4, 0, -1):
        required_referrals = level_requirements[level]
        is_current = level == current_level
        is_completed = level < current_level
        is_locked = level > current_level
        
        level_emoji = "‚úÖ" if is_completed else "üîí" if is_locked else "üèÜ" if is_current else "üèÉ"
        level_status = " (–¢–µ–∫—É—â–∏–π)" if is_current else " (–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)" if is_locked else " (–ó–∞–≤–µ—Ä—à–µ–Ω)" if is_completed else ""
        
        progress = f"{referrals_count}/{required_referrals}" if not is_completed else "‚úÖ"
        
        levels_text += f"{level_emoji} {level} —É—Ä–æ–≤–µ–Ω—å {level_status} - {progress}\n"

    profile_text = (
        f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user['phone_number']}\n"
        f"üÜî –í–∞—à referral ID: *{ref_id}*\n"
        f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: *{referrals_count}*\n\n"
        f"*–£—Ä–æ–≤–Ω–∏:*\n{levels_text}"
    )

    await message.answer(
        profile_text,
        parse_mode="Markdown"
    )

@dp.message_handler(content_types=['contact'], state=UserStates.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone_number = message.contact.phone_number
    user_id = str(message.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    referrer_id = state_data.get('referrer_id')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    existing_user = db.get_user(user_id)
    if existing_user:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ
        referrals_count = db.get_referrals_count(user_id)
        current_level = existing_user.get('level', 0)
        
        status_text = (
            f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!\n\n"
            f"–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:\n"
            f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {current_level}\n"
            f"‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referrals_count}\n"
            f"‚Ä¢ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: {'‚úÖ –û–ø–ª–∞—á–µ–Ω–æ' if current_level > 0 else '‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ'}\n\n"
        )
        
        if current_level == 0:
            status_text += "–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üîë –°—Ç–∞—Ä—Ç–æ–≤—ã–π –ö–ª—é—á'"
        else:
            status_text += "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã!"
        
        await state.finish()
        await message.answer(
            status_text,
            reply_markup=get_main_keyboard(user_id)
        )
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    success = db.create_user(
        telegram_id=user_id,
        referrer_id=referrer_id,
        phone_number=phone_number,
        level=0
    )
    
    if success:
        await state.finish()
        await message.answer(
            "*üéâ –£—Ä–∞, —Ç—ã —Å –Ω–∞–º–∏!*\n"
            "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –≤ *–ö–∞—Å—Å–µ –í–∑–∞–∏–º–æ–ø–æ–º–æ—â–∏*! üéä\n\n"
            "–û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª—ë–≥–∫–∏–π —à–∞–≥ ‚Äî –Ω–∞–∂–º–∏ –Ω–∞ *üîë –°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–ª—é—á üîë* –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π —Å–≤–æ—ë —É—á–∞—Å—Ç–∏–µ.\n"
            "–≠—Ç–æ —Ä–∞–∑–æ–≤—ã–π —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–π –≤–∑–Ω–æ—Å –≤ 4 TON, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä–æ–µ—Ç —Ç–µ–±–µ –ø—É—Ç—å –∫ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏, —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–±–æ–¥–µ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–º –¥–Ω–µ, üí∏ –Ω–æ –∏ –ø–æ–º–æ–∂–µ—Ç –≤—Å–µ–π —Å–∏—Å—Ç–µ–º–µ —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Å—Ç–Ω–æ, –Ω–∞–¥—ë–∂–Ω–æ –∏ –∏—Å–ø—Ä–∞–≤–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞. üîó\n\n"
            "*–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ —Å—Ç–∞—Ä—Ç—É–µ–º –≤–º–µ—Å—Ç–µ! üöÄ*",
            parse_mode="Markdown",
            reply_markup=get_main_keyboard(user_id)
        )
    else:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@dp.message_handler(lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å")
async def show_contacts(message: types.Message):
    contacts_text = (
        "üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:\n\n"
        "üë®‚Äçüíº –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: @support\n"
        "üìß Email: support@example.com"
    )
    await message.answer(contacts_text)

@dp.message_handler(lambda message: message.text == "üîë –°—Ç–∞—Ä—Ç–æ–≤—ã–π –ö–ª—é—á")
async def process_payment(message: types.Message):
    save_button = InlineKeyboardButton(
        "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ö–æ–Ω—Ç–∞–∫—Ç",
        url="tg://addcontact?phone=9684286626&name=–°—Ç–∞—Ä—Ç–æ–≤—ã–π_–ö–ª—é—á"
    )
    confirm_button = InlineKeyboardButton(
        "‚úÖ –Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª",
        callback_data="saved_contact"
    )
    trouble_button = InlineKeyboardButton(
        "ü§î –£–ø—Å, –ø—Ä–æ–±–ª–µ–º–∞",
        callback_data="trouble"
    )
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(save_button)
    keyboard.row(confirm_button, trouble_button)
    await message.answer(
        "üöÄ –°–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞, –ø—Ä–∏–≤–ª–µ–∫–∞–π –¥—Ä—É–∑–µ–π –∏ –Ω–∞—á–Ω–∏ —Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ—ë –±—É–¥—É—â–µ–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n"
        "*–í–ø–µ—Ä—ë–¥ –∫ –Ω–æ–≤—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º!* üî•\n\n"
        "*–ß—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å —Ä–∞–∑–æ–≤—ã–π –≤–∑–Ω–æ—Å –ë–ï–ó –ö–û–ú–ò–°–°–ò–ò –¢–µ–ª–µ–≥—Ä–∞–º —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ*\n\n"
        "üëÜ –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚Äî –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –∑–∞–ø–∏—Å–Ω–∞—è –∫–Ω–∏–∂–∫–∞.\n\n"
        "üíæ –°–æ—Ö—Ä–∞–Ω–∏ –≤ –Ω–µ–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –ö–æ–Ω—Ç–∞–∫—Ç.\n"
        "üì§ –ö–æ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏—à—å, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª' –∏ —Å–ª–µ–¥—É–π –¥–∞–ª—å–Ω–µ–π—à–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n"
        
        "*–ì–æ—Ç–æ–≤? –ñ–º–∏ –∫–Ω–æ–ø–∫—É –∏ –¥–µ–π—Å—Ç–≤—É–π! üî•*",
        parse_mode="Markdown",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data == 'saved_contact')
async def process_saved_contact(callback_query: CallbackQuery):
    pay_keyboard = InlineKeyboardMarkup()
    pay_keyboard.add(InlineKeyboardButton("üíé –ó–∞–ø—É—Å—Ç–∏—Ç—å –ë–æ—Ç –¢–ì –ö–æ—à–µ–ª—å–∫–∞", url="https://t.me/wallet"))
    pay_keyboard.add(
        InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid"),
        InlineKeyboardButton("ü§î –£–ø—Å, –ø—Ä–æ–±–ª–µ–º–∞", callback_data="trouble")
    )
    await callback_query.message.answer(
        "üí≥ –û—Ç–∫—Ä–æ–π —Å–≤–æ–π –∫–æ—à–µ–ª—ë–∫ –≤ Telegram.\n"
        "üì§ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å', –≤—ã–±–µ—Ä–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –∏–∑ –∑–∞–ø–∏—Å–Ω–æ–π –∫–Ω–∏–∂–∫–∏.\n"
        "üí∏ –ü–µ—Ä–µ–≤–µ–¥–∏ 4 TON –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —É—á–∞—Å—Ç–∏—è.\n\n"
        "üì§ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ –∑–¥–µ—Å—å –∫–Ω–æ–ø–∫—É '–Ø –æ–ø–ª–∞—Ç–∏–ª'\n"
        "–ë–æ—Ç –ø—Ä–∏—à–ª–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —É—á–∞—Å—Ç–∏–µ\n\n",
        reply_markup=pay_keyboard
    )
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == 'paid')
async def process_paid(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–Ø –æ–ø–ª–∞—Ç–∏–ª'"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_id = str(callback_query.from_user.id)
    user = db.get_user(user_id)
    
    if not user:
        await callback_query.message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback_query.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    confirm_keyboard = InlineKeyboardMarkup()
    confirm_keyboard.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_payment:{user_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_payment:{user_id}")
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin_message = (
        f"üîî –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {user['phone_number']}\n"
        f"–°—É–º–º–∞: 4 TON\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –∫–æ—à–µ–ª–µ–∫ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –ø–ª–∞—Ç–µ–∂"
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admins = db.get_active_admins()
    sent_to_admins = False
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    for admin in admins:
        try:
            await bot.send_message(
                chat_id=admin['telegram_id'],
                text=admin_message,
                reply_markup=confirm_keyboard
            )
            sent_to_admins = True
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin['telegram_id']}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin['telegram_id']}: {e}")
    
    if not sent_to_admins:
        await callback_query.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await callback_query.answer()
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.message.answer(
        "–í–∞—à –ø–ª–∞—Ç–µ–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        reply_markup=None
    )
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith(('confirm_payment:', 'reject_payment:')))
async def process_payment_action(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
    if not db.is_admin(str(callback_query.from_user.id)):
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    action, user_id = callback_query.data.split(':')
    user = db.get_user(user_id)
    
    if not user:
        await callback_query.message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback_query.answer()
        return

    admin_id = str(callback_query.from_user.id)
    if action == 'confirm_payment':
        # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        with db.get_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    UPDATE users 
                    SET level = 1
                    WHERE telegram_id = %s
                """, (user_id,))
                conn.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await bot.send_message(
            chat_id=user_id,
            text="‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É.\n\n"
                 "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã!",
            reply_markup=get_main_keyboard(user_id)
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await callback_query.message.edit_text(
            f"‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_id}"
        )
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
        await bot.send_message(
            chat_id=user_id,
            text="‚ùå –í–∞—à –ø–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—É–º–º—É –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–ª–∞—Ç–µ–∂–∞.",
            reply_markup=get_main_keyboard(user_id)
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await callback_query.message.edit_text(
            f"‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_id}"
        )
    
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == 'trouble')
async def process_trouble(callback_query: CallbackQuery):
    await callback_query.message.answer("–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @support")
    await callback_query.answer()

@dp.message_handler(lambda message: message.text == "üíé –ó–∞–ø—É—Å—Ç–∏—Ç—å –ë–æ—Ç –¢–ì –ö–æ—à–µ–ª—å–∫–∞")
async def open_wallet(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ—à–µ–ª—å–∫–∞"""
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å URL –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –±–æ—Ç–∞ –∫–æ—à–µ–ª—å–∫–∞
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(
        "üíé –ó–∞–ø—É—Å—Ç–∏—Ç—å –ë–æ—Ç –¢–ì –ö–æ—à–µ–ª—å–∫–∞",
        url="https://t.me/wallet"
    ))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    await message.answer(
        "–î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data == "open_wallet")
async def process_wallet_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ—à–µ–ª—å–∫–∞"""
    await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /wallet –≤ –ª—é–±–æ–º —á–∞—Ç–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ—à–µ–ª—å–∫–∞.")
    await callback_query.answer()

async def check_and_update_level(user_id: str):
    user = db.get_user(user_id)
    if not user:
        return

    current_level = user.get('level', 0)
    referrals_count = db.get_referrals_count(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    next_level = current_level + 1
    required_referrals = {
        4: 4,    # –ù–∞—á–∏–Ω–∞—é—â–∏–π
        3: 16,   # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π
        2: 64,   # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª
        1: 256   # –≠–∫—Å–ø–µ—Ä—Ç
    }.get(next_level, 0)
    
    if referrals_count >= required_referrals and next_level <= 4:
        db.update_user_level(user_id, next_level)
        return True
    return False

@dp.message_handler(lambda message: message.text == "üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –î—Ä—É–∑–µ–π")
async def invite_friends(message: types.Message):
    user = db.get_user(str(message.from_user.id))
    if not user:
        await message.answer(
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å:",
            reply_markup=get_registration_keyboard()
        )
        await UserStates.waiting_for_phone.set()
        return

    ref_id = get_referral_id(user['phone_number'])
    
    # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞
    bot_info = await bot.get_me()
    bot_username = bot_info.username
    
    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫—É –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞
    share_button = InlineKeyboardButton(
        "üë• –ü–æ–¥–µ–ª–∏—Ç—å—Å—è",
        switch_inline_query=f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –ö–∞—Å—Å–µ –í–∑–∞–∏–º–æ–ø–æ–º–æ—â–∏! https://t.me/{bot_username}?start={ref_id}"
    )
    share_keyboard = InlineKeyboardMarkup()
    share_keyboard.add(share_button)
    
    invite_text = (
        f"üéØ *–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å—ã!*\n\n"
        f"–¢–≤–æ–π referral ID: *{ref_id}*\n\n"
        f"*–ö–∞–∫ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π:*\n"
        f"1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ–º—É –¥—Ä—É–≥—É —ç—Ç—É —Å—Å—ã–ª–∫—É:\n"
        f"https://t.me/{bot_username}?start={ref_id}\n\n"
        f"*–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ —Ç—ã –ø–æ–ª—É—á–∏—à—å –±–æ–Ω—É—Å—ã!* üéÅ"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π —à–∞—Ä–∏–Ω–≥–∞
    await message.answer(
        invite_text,
        parse_mode="Markdown",
        reply_markup=share_keyboard
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ—Å–ª–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    if await check_and_update_level(str(message.from_user.id)):
        await message.answer(
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è!",
            reply_markup=get_main_keyboard()
        )

@dp.message_handler(content_types=['contact'])
async def handle_contact(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    if message.contact:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ–º—É –¥—Ä—É–≥—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º ID.",
            reply_markup=get_main_keyboard()
        )

# –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message_handler(commands=['admin'])
async def cmd_admin(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not db.is_admin(str(message.from_user.id)):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    is_main = db.is_main_admin(str(message.from_user.id))
    welcome_text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n\n"
    if is_main:
        welcome_text += "üëë –í—ã –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n\n"
    else:
        welcome_text += "üë§ –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n\n"
    
    welcome_text += "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    welcome_text += "‚Ä¢ /admin - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
    welcome_text += "‚Ä¢ /admins - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n"
    
    if is_main:
        welcome_text += "‚Ä¢ /add_admin ID - –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        welcome_text += "‚Ä¢ /remove_admin ID - —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    keyboard = get_admin_keyboard()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        welcome_text,
        reply_markup=keyboard
    )

@dp.message_handler(lambda message: message.text == "üë• –°–ø–∏—Å–æ–∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
async def show_admins_list(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    if not db.is_admin(str(message.from_user.id)):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    admins = db.get_active_admins()
    if not admins:
        await message.answer("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.")
        return

    admin_list = ["üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:"]
    for admin in admins:
        prefix = "üëë" if admin['is_main_admin'] else "üë§"
        admin_info = f"{prefix} {admin['first_name']} {admin['last_name']} (@{admin['username']})"
        if admin['is_main_admin']:
            admin_info += " - –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        admin_list.append(admin_info)

    await message.answer("\n".join(admin_list))

@dp.message_handler(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ê–¥–º–∏–Ω–∞")
async def add_admin_prompt(message: types.Message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not db.is_main_admin(str(message.from_user.id)):
        await message.answer("–¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
        "–ü—Ä–∏–º–µ—Ä: 123456789"
    )

@dp.message_handler(lambda message: message.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –ê–¥–º–∏–Ω–∞")
async def remove_admin_prompt(message: types.Message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    if not db.is_main_admin(str(message.from_user.id)):
        await message.answer("–¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.\n"
        "–ü—Ä–∏–º–µ—Ä: 123456789"
    )

@dp.message_handler(commands=['admins'])
async def cmd_list_admins(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    if not db.is_admin(str(message.from_user.id)):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    admins = db.get_active_admins()
    if not admins:
        await message.answer("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.")
        return

    admin_list = ["üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:"]
    for admin in admins:
        prefix = "üëë" if admin['is_main_admin'] else "üë§"
        admin_info = f"{prefix} {admin['first_name']} {admin['last_name']} (@{admin['username']})"
        if admin['is_main_admin']:
            admin_info += " - –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        admin_list.append(admin_info)

    await message.answer("\n".join(admin_list))

@dp.message_handler(commands=['add_admin'])
async def cmd_add_admin(message: types.Message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not db.is_main_admin(str(message.from_user.id)):
        await message.answer("–¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    args = message.get_args()
    if not args:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n–ü—Ä–∏–º–µ—Ä: /add_admin 123456789")
        return

    admin_id = args.strip()
    if not admin_id.isdigit():
        await message.answer("ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    if db.add_admin(admin_id, str(message.from_user.id)):
        await message.answer(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id}.")

@dp.message_handler(commands=['remove_admin'])
async def cmd_remove_admin(message: types.Message):
    """–£–¥–∞–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not db.is_main_admin(str(message.from_user.id)):
        await message.answer("–¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    args = message.get_args()
    if not args:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n–ü—Ä–∏–º–µ—Ä: /remove_admin 123456789")
        return

    admin_id = args.strip()
    if not admin_id.isdigit():
        await message.answer("ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    if admin_id == os.getenv('MAIN_ADMIN_ID'):
        await message.answer("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    if db.remove_admin(admin_id, str(message.from_user.id)):
        await message.answer(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    else:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id}.")

@dp.message_handler(lambda message: message.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –£—Ä–æ–≤–Ω–∏")
async def edit_levels(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not db.is_admin(str(message.from_user.id)):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
        
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —É—Ä–æ–≤–Ω—è
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üëë Level 1", callback_data="select_level:1"),
        InlineKeyboardButton("üëë Level 2", callback_data="select_level:2")
    )
    keyboard.add(
        InlineKeyboardButton("üëë Level 3", callback_data="select_level:3"),
        InlineKeyboardButton("üëë Level 4", callback_data="select_level:4")
    )
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data.startswith("select_level:"))
async def process_level_selection(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è"""
    level = int(callback_query.data.split(":")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —É—Ä–æ–≤–Ω—é
    all_users = db.get_all_users()
    level_users = [user for user in all_users if user.get('level') == level]
    
    if not level_users:
        await callback_query.message.answer(f"–°–ø–∏—Å–æ–∫ Level {level} –ø—É—Å—Ç.")
        return
        
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    keyboard = InlineKeyboardMarkup(row_width=2)
    for user in level_users:
        keyboard.add(InlineKeyboardButton(
            f"@{user['username']} ({user['telegram_id']})",
            callback_data=f"edit_user:{level}:{user['telegram_id']}"
        ))
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="select_levels"))
    
    await callback_query.message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Level {level} –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data == "select_levels")
async def process_back_to_levels(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —É—Ä–æ–≤–Ω—è"""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —É—Ä–æ–≤–Ω—è
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üëë Level 1", callback_data="select_level:1"),
        InlineKeyboardButton("üëë Level 2", callback_data="select_level:2")
    )
    keyboard.add(
        InlineKeyboardButton("üëë Level 3", callback_data="select_level:3"),
        InlineKeyboardButton("üëë Level 4", callback_data="select_level:4")
    )
    
    await callback_query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data.startswith("edit_user:"))
async def process_user_edit(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    _, level, user_id = callback_query.data.split(":")
    user = db.get_user(user_id)
    
    if not user:
        await callback_query.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
        
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É—Ä–æ–≤–µ–Ω—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(edit_user_id=user_id, level=level)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª—è–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üë§ Username", callback_data="edit_field:username"),
        InlineKeyboardButton("üì± –¢–µ–ª–µ—Ñ–æ–Ω", callback_data="edit_field:phone"),
        InlineKeyboardButton("üë® –ò–º—è", callback_data="edit_field:first_name"),
        InlineKeyboardButton("üë®‚Äçüë¶ –§–∞–º–∏–ª–∏—è", callback_data="edit_field:last_name")
    )
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"select_level:{level}"))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_info = (
        f"üìã *–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Level {level}:*\n\n"
        f"üë§ Username: @{user.get('username', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.get('phone_number', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üë® –ò–º—è: {user.get('first_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üë®‚Äçüë¶ –§–∞–º–∏–ª–∏—è: {user.get('last_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    )
    
    await callback_query.message.answer(
        user_info,
        parse_mode="Markdown",
        reply_markup=keyboard
    )

def validate_phone(phone: str) -> Tuple[bool, str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    pattern = r'^\+?[1-9]\d{10,14}$'
    if not re.match(pattern, phone):
        return False, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç +7XXXXXXXXXX"
    return True, ""

def validate_name(name: str) -> Tuple[bool, str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏/—Ñ–∞–º–∏–ª–∏–∏"""
    if not name.strip():
        return False, "‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    if not name.replace(" ", "").isalpha():
        return False, "‚ùå –ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã"
    if len(name) < 2:
        return False, "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞"
    return True, ""

def validate_username(username: str) -> Tuple[bool, str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è username"""
    if not username.strip():
        return False, "‚ùå Username –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    if not re.match(r'^[a-zA-Z0-9_]+$', username):
        return False, "‚ùå Username –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è"
    if len(username) < 3:
        return False, "‚ùå Username –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞"
    return True, ""

@dp.callback_query_handler(lambda c: c.data.startswith("edit_field:"))
async def process_field_edit(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    field = callback_query.data.split(":")[1]
    data = await state.get_data()
    level = data.get('level')
    user_id = data.get('edit_user_id')
    user = db.get_user(user_id)
    
    if not user:
        await callback_query.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    await state.update_data(edit_field=field, level=level, edit_user_id=user_id)
    
    field_names = {
        "username": "username",
        "phone": "–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
        "first_name": "–∏–º—è",
        "last_name": "—Ñ–∞–º–∏–ª–∏—é"
    }
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    current_value = user.get('phone_number' if field == 'phone' else field, "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_fields"))
    
    await callback_query.message.answer(
        f"üìù –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {field_names[field]}: {current_value}\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
        reply_markup=keyboard
    )
    await state.set_state('waiting_for_field_value')

@dp.message_handler(state='waiting_for_field_value')
async def save_field_edit(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(f"[save_field_edit] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    logger.info(f"[save_field_edit] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")
    
    data = await state.get_data()
    logger.info(f"[save_field_edit] –î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {data}")
    
    field = data.get('edit_field')
    user_id = data.get('edit_user_id')
    level = data.get('level')
    
    logger.info(f"[save_field_edit] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: field={field}, user_id={user_id}, level={level}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    user = db.get_user(user_id)
    old_value = user.get(field, '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
    logger.info(f"[save_field_edit] –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è: {old_value}")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    is_valid, error_message = validate_field(field, message.text)
    if not is_valid:
        logger.warning(f"[save_field_edit] –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: {error_message}")
        await message.answer(error_message)
        return
        
    logger.info(f"[save_field_edit] –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é: {message.text}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ –∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    field_names = {
        "username": "Username",
        "phone": "–¢–µ–ª–µ—Ñ–æ–Ω",
        "first_name": "–ò–º—è",
        "last_name": "–§–∞–º–∏–ª–∏—è"
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(new_value=message.text)
    logger.info(f"[save_field_edit] –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_edit:{field}:{user_id}:{message.text}"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_edit")
    )
    
    await message.answer(
        f"üìã *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:*\n\n"
        f"–ü–æ–ª–µ: {field_names[field]}\n"
        f"–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {old_value}\n"
        f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {message.text}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ?",
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    logger.info(f"[save_field_edit] –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

@dp.callback_query_handler(lambda c: c.data.startswith("confirm_edit:"), state='waiting_for_field_value')
async def process_confirm_edit(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—è"""
    logger.info(f"[process_confirm_edit] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    logger.info(f"[process_confirm_edit] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    _, field, user_id, new_value = callback_query.data.split(":")
    logger.info(f"[process_confirm_edit] –î–∞–Ω–Ω—ã–µ –∏–∑ callback: field={field}, user_id={user_id}, new_value={new_value}")
    
    try:
        logger.info(f"[process_confirm_edit] –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –≤ –ë–î")
        success = db.update_user_field(user_id, field, new_value)
        if success:
            logger.info(f"[process_confirm_edit] –ü–æ–ª–µ {field} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_value}")
            await callback_query.message.answer(f"‚úÖ –ü–æ–ª–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        else:
            logger.error(f"[process_confirm_edit] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è {field} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è")
    except Exception as e:
        logger.error(f"[process_confirm_edit] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è {field}: {str(e)}")
        await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.finish()
        logger.info(f"[process_confirm_edit] –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

@dp.callback_query_handler(lambda c: c.data == "cancel_edit", state='waiting_for_field_value')
async def process_cancel_edit(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—è"""
    logger.info(f"[process_cancel_edit] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    logger.info(f"[process_cancel_edit] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")
    
    await callback_query.message.answer("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await state.finish()
    logger.info(f"[process_cancel_edit] –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

@dp.callback_query_handler(lambda c: c.data == "back_to_fields", state='waiting_for_field_value')
async def process_back_to_fields_from_input(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª–µ–π –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è"""
    data = await state.get_data()
    user_id = data.get('edit_user_id')
    level = data.get('level')
    
    if not user_id or not level:
        await callback_query.message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        await state.finish()
        return
        
    user = db.get_user(user_id)
    if not user:
        await callback_query.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.finish()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª—è–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üë§ Username", callback_data="edit_field:username"),
        InlineKeyboardButton("üì± –¢–µ–ª–µ—Ñ–æ–Ω", callback_data="edit_field:phone")
    )
    keyboard.add(
        InlineKeyboardButton("üë® –ò–º—è", callback_data="edit_field:first_name"),
        InlineKeyboardButton("üë®‚Äçüë¶ –§–∞–º–∏–ª–∏—è", callback_data="edit_field:last_name")
    )
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"select_level:{level}"))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_info = (
        f"üìã *–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Level {level}:*\n\n"
        f"üë§ Username: @{user.get('username', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.get('phone_number', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üë® –ò–º—è: {user.get('first_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üë®‚Äçüë¶ –§–∞–º–∏–ª–∏—è: {user.get('last_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    )
    
    await callback_query.message.answer(
        user_info,
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    await state.finish()

async def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return await db.is_admin(str(user_id)) 