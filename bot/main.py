import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils import executor
from bot.database import db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv('TELEGRAM_BOT_TOKEN'))
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class UserStates(StatesGroup):
    waiting_for_phone = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ"))
    keyboard.add(KeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"))
    keyboard.add(KeyboardButton("üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã"))
    return keyboard

def get_registration_keyboard():
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏—é
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    args = message.get_args()
    referrer_id = args if args else None

    await message.answer(
        "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–¢–≤–æ–π –ø—É—Ç—å –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–±–æ–¥–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–¥–µ—Å—å!\n–ü—Ä–æ–π–¥–∏ –∫–æ—Ä–æ—Ç–∫—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –Ω–∞—à–µ–π *–ö–∞—Å—Å–µ –í–∑–∞–∏–º–æ–ø–æ–º–æ—â–∏* –∏ –Ω–∞—á–Ω–∏ —Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ—ë —É–≤–µ—Ä–µ–Ω–Ω–æ–µ –±—É–¥—É—â–µ–µ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è. üî•\n–ì–æ—Ç–æ–≤? –ñ–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ! üëá",
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(
            KeyboardButton("üîë –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–¢–¨–°–Ø üîë", request_contact=True)
        )
    )

    if referrer_id:
        await UserStates.waiting_for_phone.set()
        await state.update_data(referrer_id=referrer_id)
    else:
        await UserStates.waiting_for_phone.set()

@dp.callback_query_handler(lambda c: c.data == 'register', state='*')
async def process_register_callback(callback_query: CallbackQuery):
    reg_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    reg_keyboard.add(KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True))
    await callback_query.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
        reply_markup=reg_keyboard
    )
    await callback_query.answer("–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!")

@dp.message_handler(lambda message: message.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: types.Message):
    user = db.get_user(str(message.from_user.id))
    if not user:
        await message.answer(
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=get_registration_keyboard()
        )
        await UserStates.waiting_for_phone.set()
        return

    await message.answer(
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user['phone_number']}\n"
        f"üìä –£—Ä–æ–≤–µ–Ω—å: {user['level']}"
    )

@dp.message_handler(content_types=['contact'], state=UserStates.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone_number = message.contact.phone_number
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    referrer_id = state_data.get('referrer_id')
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–º
    success = db.create_user(
        telegram_id=str(message.from_user.id),
        referrer_id=referrer_id,
        phone_number=phone_number
    )
    
    if success:
        await state.finish()
        await message.answer(
            "–°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.",
            reply_markup=get_main_keyboard()
        )
    else:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@dp.message_handler(lambda message: message.text == "üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def show_contacts(message: types.Message):
    contacts_text = (
        "üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:\n\n"
        "üë®‚Äçüíº –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: @support\n"
        "üìß Email: support@example.com"
    )
    await message.answer(contacts_text)

@dp.message_handler(lambda message: message.text == "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ")
async def process_payment(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞
    save_button = InlineKeyboardButton(
        "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–º–µ—Ä",
        url="tg://addcontact?phone=9250007755&name=MATRIX"
    )
    keyboard = InlineKeyboardMarkup()
    keyboard.add(save_button)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await message.answer(
        "–î–ª—è –æ–ø–ª–∞—Ç—ã —É—á–∞—Å—Ç–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n"
        "MATRIX: 9250007755\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –≤ –∑–∞–ø–∏—Å–Ω–æ–π –∫–Ω–∏–∂–∫–µ:",
        reply_markup=keyboard
    ) 