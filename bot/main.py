import logging
import os
import hashlib
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils import executor
from bot.database import db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv('TELEGRAM_BOT_TOKEN'))
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class UserStates(StatesGroup):
    waiting_for_phone = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üîë –°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–ª—é—á üîë"))
    keyboard.add(KeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"))
    keyboard.add(KeyboardButton("üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã"))
    keyboard.add(KeyboardButton("üíé –ó–∞–ø—É—Å—Ç–∏—Ç—å –ë–æ—Ç –¢–ì –ö–æ—à–µ–ª—å–∫–∞"))
    return keyboard

def get_registration_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üîë –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", request_contact=True))
    return keyboard

def get_referral_id(phone_number):
    if not phone_number:
        return "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    phone_bytes = phone_number.encode('utf-8')
    hash_object = hashlib.md5(phone_bytes)
    hash_hex = hash_object.hexdigest()
    return hash_hex[:8]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    args = message.get_args()
    referrer_id = args if args else None

    await message.answer(
        "üöÄ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*\n"
        "–¢–≤–æ–π –ø—É—Ç—å –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–±–æ–¥–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–¥–µ—Å—å!\n"
        "–ü—Ä–æ–π–¥–∏ –∫–æ—Ä–æ—Ç–∫—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –Ω–∞—à–µ–π *–ö–∞—Å—Å–µ –í–∑–∞–∏–º–æ–ø–æ–º–æ—â–∏* –∏ –Ω–∞—á–Ω–∏ —Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ—ë —É–≤–µ—Ä–µ–Ω–Ω–æ–µ –±—É–¥—É—â–µ–µ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è. üî•\n"
        "–ì–æ—Ç–æ–≤? –ñ–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ! üëá",
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(
            KeyboardButton("üîë –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–¢–¨–°–Ø üîë", request_contact=True)
        )
    )

    if referrer_id:
        await UserStates.waiting_for_phone.set()
        await state.update_data(referrer_id=referrer_id)
    else:
        await UserStates.waiting_for_phone.set()

@dp.callback_query_handler(lambda c: c.data == 'register', state='*')
async def process_register_callback(callback_query: CallbackQuery):
    reg_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    reg_keyboard.add(KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True))
    await callback_query.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
        reply_markup=reg_keyboard
    )
    await callback_query.answer("–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!")

@dp.message_handler(lambda message: message.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: types.Message):
    user = db.get_user(str(message.from_user.id))
    if not user:
        await message.answer(
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å:",
            reply_markup=get_registration_keyboard()
        )
        await UserStates.waiting_for_phone.set()
        return
    ref_id = get_referral_id(user['phone_number'])
    levels_text = (
        "üèÉ 0 —É—Ä–æ–≤–µ–Ω—å ‚úÖ\n"
        "ü•â 4 —É—Ä–æ–≤–µ–Ω—å\n"
        "ü•à 3 —É—Ä–æ–≤–µ–Ω—å\n"
        "ü•á 2 —É—Ä–æ–≤–µ–Ω—å\n"
        "üèÜ 1 —É—Ä–æ–≤–µ–Ω—å"
    )
    await message.answer(
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user['phone_number']}\n"
        f"üÜî –í–∞—à referral ID: {ref_id}\n"
        f"{levels_text}"
    )

@dp.message_handler(content_types=['contact'], state=UserStates.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone_number = message.contact.phone_number
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    referrer_id = state_data.get('referrer_id')
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–º –∏ —É—Ä–æ–≤–Ω–µ–º 0
    success = db.create_user(
        telegram_id=str(message.from_user.id),
        referrer_id=referrer_id,
        phone_number=phone_number,
        level=0
    )
    
    if success:
        await state.finish()
        await message.answer(
            "*üéâ –£—Ä–∞, —Ç—ã —Å –Ω–∞–º–∏!*\n"
            "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –≤ *–ö–∞—Å—Å–µ –í–∑–∞–∏–º–æ–ø–æ–º–æ—â–∏*! üéä\n\n"
            "–û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª—ë–≥–∫–∏–π —à–∞–≥ ‚Äî –Ω–∞–∂–º–∏ –Ω–∞ *üîë –°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–ª—é—á üîë* –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π —Å–≤–æ—ë —É—á–∞—Å—Ç–∏–µ.\n"
            "–≠—Ç–æ —Ä–∞–∑–æ–≤—ã–π —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–π –≤–∑–Ω–æ—Å –≤ 4 TON, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä–æ–µ—Ç —Ç–µ–±–µ –ø—É—Ç—å –∫ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏, —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–±–æ–¥–µ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–º –¥–Ω–µ, üí∏ –Ω–æ –∏ –ø–æ–º–æ–∂–µ—Ç –≤—Å–µ–π —Å–∏—Å—Ç–µ–º–µ —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Å—Ç–Ω–æ, –Ω–∞–¥—ë–∂–Ω–æ –∏ –∏—Å–ø—Ä–∞–≤–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞. üîó\n\n"
            "*–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ —Å—Ç–∞—Ä—Ç—É–µ–º –≤–º–µ—Å—Ç–µ! üöÄ*",
            parse_mode="Markdown",
            reply_markup=get_main_keyboard()
        )
    else:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@dp.message_handler(lambda message: message.text == "üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def show_contacts(message: types.Message):
    contacts_text = (
        "üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:\n\n"
        "üë®‚Äçüíº –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: @support\n"
        "üìß Email: support@example.com"
    )
    await message.answer(contacts_text)

@dp.message_handler(lambda message: message.text == "üîë –°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–ª—é—á üîë")
async def process_payment(message: types.Message):
    save_button = InlineKeyboardButton(
        "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ö–æ–Ω—Ç–∞–∫—Ç",
        url="tg://addcontact?phone=9684286626&name=–°—Ç–∞—Ä—Ç–æ–≤—ã–π_–ö–ª—é—á"
    )
    confirm_button = InlineKeyboardButton(
        "‚úÖ –Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª",
        callback_data="saved_contact"
    )
    trouble_button = InlineKeyboardButton(
        "ü§î –£–ø—Å, –ø—Ä–æ–±–ª–µ–º–∞",
        callback_data="trouble"
    )
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(save_button)
    keyboard.row(confirm_button, trouble_button)
    await message.answer(
        "üöÄ –°–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞, –ø—Ä–∏–≤–ª–µ–∫–∞–π –¥—Ä—É–∑–µ–π –∏ –Ω–∞—á–Ω–∏ —Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ—ë –±—É–¥—É—â–µ–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n"
        "*–í–ø–µ—Ä—ë–¥ –∫ –Ω–æ–≤—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º!* üî•\n\n"
        "*–ß—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å —Ä–∞–∑–æ–≤—ã–π –≤–∑–Ω–æ—Å –ë–ï–ó –ö–û–ú–ò–°–°–ò–ò –¢–µ–ª–µ–≥—Ä–∞–º —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ*\n\n"
        "üëÜ –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚Äî –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –∑–∞–ø–∏—Å–Ω–∞—è –∫–Ω–∏–∂–∫–∞.\n\n"
        "üíæ –°–æ—Ö—Ä–∞–Ω–∏ –≤ –Ω–µ–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –ö–æ–Ω—Ç–∞–∫—Ç.\n"
        "üì§ –ö–æ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏—à—å, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª' –∏ —Å–ª–µ–¥—É–π –¥–∞–ª—å–Ω–µ–π—à–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n"
        
        "*–ì–æ—Ç–æ–≤? –ñ–º–∏ –∫–Ω–æ–ø–∫—É –∏ –¥–µ–π—Å—Ç–≤—É–π! üî•*",
        parse_mode="Markdown",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data == 'saved_contact')
async def process_saved_contact(callback_query: CallbackQuery):
    pay_keyboard = InlineKeyboardMarkup()
    pay_keyboard.add(InlineKeyboardButton("üíé –ó–∞–ø—É—Å—Ç–∏—Ç—å –ë–æ—Ç –¢–ì –ö–æ—à–µ–ª—å–∫–∞", url="https://t.me/wallet"))
    pay_keyboard.add(
        InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid"),
        InlineKeyboardButton("ü§î –£–ø—Å, –ø—Ä–æ–±–ª–µ–º–∞", callback_data="trouble")
    )
    await callback_query.message.answer(
        "üí≥ –û—Ç–∫—Ä–æ–π —Å–≤–æ–π –∫–æ—à–µ–ª—ë–∫ –≤ Telegram.\n"
        "üì§ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å', –≤—ã–±–µ—Ä–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –∏–∑ –∑–∞–ø–∏—Å–Ω–æ–π –∫–Ω–∏–∂–∫–∏.\n"
        "üí∏ –ü–µ—Ä–µ–≤–µ–¥–∏ 4 TON –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —É—á–∞—Å—Ç–∏—è.\n\n"
        "üì§ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ –∑–¥–µ—Å—å –∫–Ω–æ–ø–∫—É '–Ø –æ–ø–ª–∞—Ç–∏–ª'\n"
        "–ë–æ—Ç –ø—Ä–∏—à–ª–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —É—á–∞—Å—Ç–∏–µ\n\n",
        reply_markup=pay_keyboard
    )
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == 'paid')
async def process_paid(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–Ø –æ–ø–ª–∞—Ç–∏–ª'"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_id = str(callback_query.from_user.id)
    user = db.get_user(user_id)
    
    if not user:
        await callback_query.message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback_query.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    confirm_keyboard = InlineKeyboardMarkup()
    confirm_keyboard.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_payment"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="reject_payment")
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_message = (
        f"üîî –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {user['phone_number']}\n"
        f"–°—É–º–º–∞: 4 TON\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –∫–æ—à–µ–ª–µ–∫ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –ø–ª–∞—Ç–µ–∂"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_username = "@DeeNastiya"
    try:
        await bot.send_message(
            chat_id=admin_username,
            text=admin_message,
            reply_markup=confirm_keyboard
        )
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_username}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
        await callback_query.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.message.answer(
        "–í–∞—à –ø–ª–∞—Ç–µ–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        reply_markup=confirm_keyboard
    )
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == 'confirm_payment')
async def confirm_payment(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    await callback_query.message.answer("–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == 'reject_payment')
async def reject_payment(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    await callback_query.message.answer("–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω!")
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == 'trouble')
async def process_trouble(callback_query: CallbackQuery):
    await callback_query.message.answer("–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @support")
    await callback_query.answer()

@dp.message_handler(lambda message: message.text == "üíé –ó–∞–ø—É—Å—Ç–∏—Ç—å –ë–æ—Ç –¢–ì –ö–æ—à–µ–ª—å–∫–∞")
async def open_wallet(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ—à–µ–ª—å–∫–∞"""
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å URL –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –±–æ—Ç–∞ –∫–æ—à–µ–ª—å–∫–∞
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(
        "üíé –ó–∞–ø—É—Å—Ç–∏—Ç—å –ë–æ—Ç –¢–ì –ö–æ—à–µ–ª—å–∫–∞",
        url="https://t.me/wallet"
    ))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    await message.answer(
        "–î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data == "open_wallet")
async def process_wallet_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ—à–µ–ª—å–∫–∞"""
    await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /wallet –≤ –ª—é–±–æ–º —á–∞—Ç–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ—à–µ–ª—å–∫–∞.")
    await callback_query.answer() 