# -*- coding: utf-8 -*-
"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å Telegram –±–æ—Ç–∞.
–°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
"""

import logging
import os
import hashlib
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils import executor
from bot.database import db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv('TELEGRAM_BOT_TOKEN'))
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class UserStates(StatesGroup):
    """
    –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è FSM (Finite State Machine).
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.
    """
    waiting_for_phone = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard(user_id: str = None):
    """
    –°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        user_id (str, optional): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –µ–≥–æ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞.
        
    Returns:
        ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    """
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    
    if user_id:
        user = db.get_user(user_id)
        if user and user.get('level', 0) > 0:
            # –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—É—Ä–æ–≤–µ–Ω—å > 0)
            keyboard.add(KeyboardButton("üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –î—Ä—É–∑–µ–π"))
            keyboard.add(KeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å"))
            keyboard.add(KeyboardButton("‚ùì –ü–æ–º–æ—â—å"))
        else:
            # –î–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            keyboard.add(KeyboardButton("üîë –°—Ç–∞—Ä—Ç–æ–≤—ã–π –ö–ª—é—á"))
            keyboard.add(KeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å"))
    else:
        # –ï—Å–ª–∏ user_id –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard.add(KeyboardButton("üîë –°—Ç–∞—Ä—Ç–æ–≤—ã–π –ö–ª—é—á"))
        keyboard.add(KeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å"))
    
    return keyboard

def get_registration_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    
    Returns:
        ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    """
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ö–æ–Ω—Ç–∞–∫—Ç", request_contact=True))
    return keyboard

def get_referral_id(phone_number):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    
    Args:
        phone_number (str): –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        str: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    """
    return hashlib.md5(phone_number.encode()).hexdigest()[:10]

def get_admin_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
    
    Returns:
        ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    """
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"))
    keyboard.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ê–¥–º–∏–Ω–∞"), KeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –ê–¥–º–∏–Ω–∞"))
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    
    Args:
        message (types.Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = str(message.from_user.id)
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = db.get_user(user_id)
    
    if not user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Kassa Bot!\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
            reply_markup=get_registration_keyboard()
        )
        await UserStates.waiting_for_phone.set()
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        await message.answer(
            f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {first_name}!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard(user_id)
        )

@dp.callback_query_handler(lambda c: c.data == 'register', state='*')
async def process_register_callback(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    
    Args:
        callback_query (CallbackQuery): –í—Ö–æ–¥—è—â–∏–π callback-–∑–∞–ø—Ä–æ—Å
    """
    await callback_query.answer()
    await callback_query.message.answer(
        "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=get_registration_keyboard()
    )
    await UserStates.waiting_for_phone.set()

@dp.message_handler(lambda message: message.text == "üìä –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        message (types.Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    user_id = str(message.from_user.id)
    user = db.get_user(user_id)
    
    if user:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
        profile_text = (
            f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
            f"ID: {user['telegram_id']}\n"
            f"–£—Ä–æ–≤–µ–Ω—å: {user['level']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {user['phone_number']}\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if user['referral_id']:
            referrer = db.get_user(user['referral_id'])
            if referrer:
                profile_text += f"–ù–∞—Å—Ç–∞–≤–Ω–∏–∫: {referrer['first_name']} (–£—Ä–æ–≤–µ–Ω—å {referrer['level']})\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö
        referrals_count = db.get_referrals_count(user_id)
        profile_text += f"–†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referrals_count}\n"
        
        await message.answer(profile_text)
    else:
        await message.answer(
            "–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )

@dp.message_handler(content_types=['contact'], state=UserStates.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    
    Args:
        message (types.Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    user_id = str(message.from_user.id)
    phone_number = message.contact.phone_number
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = db.get_user(user_id)
    
    if not user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        referral_id = get_referral_id(phone_number)
        if db.create_user(user_id, referral_id, phone_number):
            await message.answer(
                "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "1. –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π\n"
                "2. –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
                "3. –ü–æ–ª—É—á–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã",
                reply_markup=get_main_keyboard(user_id)
            )
        else:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if db.update_user(user_id, phone_number=phone_number):
            await message.answer(
                "‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
                reply_markup=get_main_keyboard(user_id)
            )
        else:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
            )
    
    await state.finish()

@dp.message_handler(lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å")
async def show_contacts(message: types.Message):
    contacts_text = (
        "üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:\n\n"
        "üë®‚Äçüíº –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: @support\n"
        "üìß Email: support@example.com"
    )
    await message.answer(contacts_text)

@dp.message_handler(lambda message: message.text == "üîë –°—Ç–∞—Ä—Ç–æ–≤—ã–π –ö–ª—é—á")
async def process_payment(message: types.Message):
    save_button = InlineKeyboardButton(
        "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ö–æ–Ω—Ç–∞–∫—Ç",
        url="tg://addcontact?phone=9684286626&name=–°—Ç–∞—Ä—Ç–æ–≤—ã–π_–ö–ª—é—á"
    )
    confirm_button = InlineKeyboardButton(
        "‚úÖ –Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª",
        callback_data="saved_contact"
    )
    trouble_button = InlineKeyboardButton(
        "ü§î –£–ø—Å, –ø—Ä–æ–±–ª–µ–º–∞",
        callback_data="trouble"
    )
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(save_button)
    keyboard.row(confirm_button, trouble_button)
    await message.answer(
        "üöÄ –°–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞, –ø—Ä–∏–≤–ª–µ–∫–∞–π –¥—Ä—É–∑–µ–π –∏ –Ω–∞—á–Ω–∏ —Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ—ë –±—É–¥—É—â–µ–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n"
        "*–í–ø–µ—Ä—ë–¥ –∫ –Ω–æ–≤—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º!* üî•\n\n"
        "*–ß—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å —Ä–∞–∑–æ–≤—ã–π –≤–∑–Ω–æ—Å –ë–ï–ó –ö–û–ú–ò–°–°–ò–ò –¢–µ–ª–µ–≥—Ä–∞–º —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ*\n\n"
        "üëÜ –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚Äî –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –∑–∞–ø–∏—Å–Ω–∞—è –∫–Ω–∏–∂–∫–∞.\n\n"
        "üíæ –°–æ—Ö—Ä–∞–Ω–∏ –≤ –Ω–µ–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –ö–æ–Ω—Ç–∞–∫—Ç.\n"
        "üì§ –ö–æ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏—à—å, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª' –∏ —Å–ª–µ–¥—É–π –¥–∞–ª—å–Ω–µ–π—à–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n"
        
        "*–ì–æ—Ç–æ–≤? –ñ–º–∏ –∫–Ω–æ–ø–∫—É –∏ –¥–µ–π—Å—Ç–≤—É–π! üî•*",
        parse_mode="Markdown",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data == 'saved_contact')
async def process_saved_contact(callback_query: CallbackQuery):
    pay_keyboard = InlineKeyboardMarkup()
    pay_keyboard.add(InlineKeyboardButton("üíé –ó–∞–ø—É—Å—Ç–∏—Ç—å –ë–æ—Ç –¢–ì –ö–æ—à–µ–ª—å–∫–∞", url="https://t.me/wallet"))
    pay_keyboard.add(
        InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid"),
        InlineKeyboardButton("ü§î –£–ø—Å, –ø—Ä–æ–±–ª–µ–º–∞", callback_data="trouble")
    )
    await callback_query.message.answer(
        "üí≥ –û—Ç–∫—Ä–æ–π —Å–≤–æ–π –∫–æ—à–µ–ª—ë–∫ –≤ Telegram.\n"
        "üì§ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å', –≤—ã–±–µ—Ä–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –∏–∑ –∑–∞–ø–∏—Å–Ω–æ–π –∫–Ω–∏–∂–∫–∏.\n"
        "üí∏ –ü–µ—Ä–µ–≤–µ–¥–∏ 4 TON –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —É—á–∞—Å—Ç–∏—è.\n\n"
        "üì§ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ –∑–¥–µ—Å—å –∫–Ω–æ–ø–∫—É '–Ø –æ–ø–ª–∞—Ç–∏–ª'\n"
        "–ë–æ—Ç –ø—Ä–∏—à–ª–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —É—á–∞—Å—Ç–∏–µ\n\n",
        reply_markup=pay_keyboard
    )
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == 'paid')
async def process_paid(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–Ø –æ–ø–ª–∞—Ç–∏–ª'"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_id = str(callback_query.from_user.id)
    user = db.get_user(user_id)
    
    if not user:
        await callback_query.message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback_query.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    confirm_keyboard = InlineKeyboardMarkup()
    confirm_keyboard.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_payment:{user_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_payment:{user_id}")
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin_message = (
        f"üîî –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {user['phone_number']}\n"
        f"–°—É–º–º–∞: 4 TON\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –∫–æ—à–µ–ª–µ–∫ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –ø–ª–∞—Ç–µ–∂"
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admins = db.get_active_admins()
    sent_to_admins = False
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    for admin in admins:
        try:
            await bot.send_message(
                chat_id=admin['telegram_id'],
                text=admin_message,
                reply_markup=confirm_keyboard
            )
            sent_to_admins = True
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin['telegram_id']}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin['telegram_id']}: {e}")
    
    if not sent_to_admins:
        await callback_query.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await callback_query.answer()
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.message.answer(
        "–í–∞—à –ø–ª–∞—Ç–µ–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        reply_markup=None
    )
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith(('confirm_payment:', 'reject_payment:')))
async def process_payment_action(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
    if not db.is_admin(str(callback_query.from_user.id)):
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    action, user_id = callback_query.data.split(':')
    user = db.get_user(user_id)
    
    if not user:
        await callback_query.message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback_query.answer()
        return

    admin_id = str(callback_query.from_user.id)
    if action == 'confirm_payment':
        # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        with db.get_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    UPDATE users 
                    SET level = 1
                    WHERE telegram_id = %s
                """, (user_id,))
                conn.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await bot.send_message(
            chat_id=user_id,
            text="‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É.\n\n"
                 "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã!",
            reply_markup=get_main_keyboard(user_id)
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await callback_query.message.edit_text(
            f"‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_id}"
        )
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
        await bot.send_message(
            chat_id=user_id,
            text="‚ùå –í–∞—à –ø–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—É–º–º—É –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–ª–∞—Ç–µ–∂–∞.",
            reply_markup=get_main_keyboard(user_id)
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await callback_query.message.edit_text(
            f"‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_id}"
        )
    
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == 'trouble')
async def process_trouble(callback_query: CallbackQuery):
    await callback_query.message.answer("–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @support")
    await callback_query.answer()

@dp.message_handler(lambda message: message.text == "üíé –ó–∞–ø—É—Å—Ç–∏—Ç—å –ë–æ—Ç –¢–ì –ö–æ—à–µ–ª—å–∫–∞")
async def open_wallet(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ—à–µ–ª—å–∫–∞"""
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å URL –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –±–æ—Ç–∞ –∫–æ—à–µ–ª—å–∫–∞
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(
        "üíé –ó–∞–ø—É—Å—Ç–∏—Ç—å –ë–æ—Ç –¢–ì –ö–æ—à–µ–ª—å–∫–∞",
        url="https://t.me/wallet"
    ))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    await message.answer(
        "–î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data == "open_wallet")
async def process_wallet_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ—à–µ–ª—å–∫–∞"""
    await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /wallet –≤ –ª—é–±–æ–º —á–∞—Ç–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ—à–µ–ª—å–∫–∞.")
    await callback_query.answer()

async def check_and_update_level(user_id: str):
    user = db.get_user(user_id)
    if not user:
        return

    current_level = user.get('level', 0)
    referrals_count = db.get_referrals_count(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    next_level = current_level + 1
    required_referrals = {
        4: 4,    # –ù–∞—á–∏–Ω–∞—é—â–∏–π
        3: 16,   # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π
        2: 64,   # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª
        1: 256   # –≠–∫—Å–ø–µ—Ä—Ç
    }.get(next_level, 0)
    
    if referrals_count >= required_referrals and next_level <= 4:
        db.update_user_level(user_id, next_level)
        return True
    return False

@dp.message_handler(lambda message: message.text == "üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –î—Ä—É–∑–µ–π")
async def invite_friends(message: types.Message):
    user = db.get_user(str(message.from_user.id))
    if not user:
        await message.answer(
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å:",
            reply_markup=get_registration_keyboard()
        )
        await UserStates.waiting_for_phone.set()
        return

    ref_id = get_referral_id(user['phone_number'])
    
    # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞
    bot_info = await bot.get_me()
    bot_username = bot_info.username
    
    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫—É –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞
    share_button = InlineKeyboardButton(
        "üë• –ü–æ–¥–µ–ª–∏—Ç—å—Å—è",
        switch_inline_query=f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –ö–∞—Å—Å–µ –í–∑–∞–∏–º–æ–ø–æ–º–æ—â–∏! https://t.me/{bot_username}?start={ref_id}"
    )
    share_keyboard = InlineKeyboardMarkup()
    share_keyboard.add(share_button)
    
    invite_text = (
        f"üéØ *–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å—ã!*\n\n"
        f"–¢–≤–æ–π referral ID: *{ref_id}*\n\n"
        f"*–ö–∞–∫ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π:*\n"
        f"1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ–º—É –¥—Ä—É–≥—É —ç—Ç—É —Å—Å—ã–ª–∫—É:\n"
        f"https://t.me/{bot_username}?start={ref_id}\n\n"
        f"*–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ —Ç—ã –ø–æ–ª—É—á–∏—à—å –±–æ–Ω—É—Å—ã!* üéÅ"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π —à–∞—Ä–∏–Ω–≥–∞
    await message.answer(
        invite_text,
        parse_mode="Markdown",
        reply_markup=share_keyboard
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ—Å–ª–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    if await check_and_update_level(str(message.from_user.id)):
        await message.answer(
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è!",
            reply_markup=get_main_keyboard()
        )

@dp.message_handler(content_types=['contact'])
async def handle_contact(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    if message.contact:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ–º—É –¥—Ä—É–≥—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º ID.",
            reply_markup=get_main_keyboard()
        )

# –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message_handler(commands=['admin'])
async def cmd_admin(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not db.is_admin(str(message.from_user.id)):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    is_main = db.is_main_admin(str(message.from_user.id))
    welcome_text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n\n"
    if is_main:
        welcome_text += "üëë –í—ã –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n\n"
    else:
        welcome_text += "üë§ –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n\n"
    
    welcome_text += "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    welcome_text += "‚Ä¢ /admin - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
    welcome_text += "‚Ä¢ /admins - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n"
    
    if is_main:
        welcome_text += "‚Ä¢ /add_admin ID - –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        welcome_text += "‚Ä¢ /remove_admin ID - —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    keyboard = get_admin_keyboard()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        welcome_text,
        reply_markup=keyboard
    )

@dp.message_handler(lambda message: message.text == "üë• –°–ø–∏—Å–æ–∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
async def show_admins_list(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    if not db.is_admin(str(message.from_user.id)):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    admins = db.get_active_admins()
    if not admins:
        await message.answer("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.")
        return

    admin_list = ["üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:"]
    for admin in admins:
        prefix = "üëë" if admin['is_main_admin'] else "üë§"
        admin_info = f"{prefix} {admin['first_name']} {admin['last_name']} (@{admin['username']})"
        if admin['is_main_admin']:
            admin_info += " - –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        admin_list.append(admin_info)

    await message.answer("\n".join(admin_list))

@dp.message_handler(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ê–¥–º–∏–Ω–∞")
async def add_admin_prompt(message: types.Message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not db.is_main_admin(str(message.from_user.id)):
        await message.answer("–¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
        "–ü—Ä–∏–º–µ—Ä: 123456789"
    )

@dp.message_handler(lambda message: message.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –ê–¥–º–∏–Ω–∞")
async def remove_admin_prompt(message: types.Message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    if not db.is_main_admin(str(message.from_user.id)):
        await message.answer("–¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.\n"
        "–ü—Ä–∏–º–µ—Ä: 123456789"
    )

@dp.message_handler(commands=['admins'])
async def cmd_list_admins(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    if not db.is_admin(str(message.from_user.id)):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    admins = db.get_active_admins()
    if not admins:
        await message.answer("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.")
        return

    admin_list = ["üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:"]
    for admin in admins:
        prefix = "üëë" if admin['is_main_admin'] else "üë§"
        admin_info = f"{prefix} {admin['first_name']} {admin['last_name']} (@{admin['username']})"
        if admin['is_main_admin']:
            admin_info += " - –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        admin_list.append(admin_info)

    await message.answer("\n".join(admin_list))

@dp.message_handler(commands=['add_admin'])
async def cmd_add_admin(message: types.Message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not db.is_main_admin(str(message.from_user.id)):
        await message.answer("–¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    args = message.get_args()
    if not args:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n–ü—Ä–∏–º–µ—Ä: /add_admin 123456789")
        return

    admin_id = args.strip()
    if not admin_id.isdigit():
        await message.answer("ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    if db.add_admin(admin_id, str(message.from_user.id)):
        await message.answer(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id}.")

@dp.message_handler(commands=['remove_admin'])
async def cmd_remove_admin(message: types.Message):
    """–£–¥–∞–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not db.is_main_admin(str(message.from_user.id)):
        await message.answer("–¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    args = message.get_args()
    if not args:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n–ü—Ä–∏–º–µ—Ä: /remove_admin 123456789")
        return

    admin_id = args.strip()
    if not admin_id.isdigit():
        await message.answer("ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    if admin_id == os.getenv('MAIN_ADMIN_ID'):
        await message.answer("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    if db.remove_admin(admin_id, str(message.from_user.id)):
        await message.answer(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    else:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id}.") 