"""
–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
–°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
"""

import logging
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from typing import Optional

from ..core.config import settings
from ..keyboards.base import get_admin_keyboard
from ..utils.validators import validate_field

logger = logging.getLogger(__name__)

async def cmd_admin(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    user_id = message.from_user.id
    if user_id != settings.MAIN_ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    keyboard = get_admin_keyboard()
    await message.answer(
        "üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ü–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—Ö–æ–º!* üåü\n\n"
        "*–ù–∞—à –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ê–¥–º–∏–Ω*, –≤–∞—à–∞ —ç–Ω–µ—Ä–≥–∏—è –∏ –ª–∏–¥–µ—Ä—Å—Ç–≤–æ ‚Äî –Ω–∞—Å—Ç–æ—è—â–∏–π –¥–≤–∏–≥–∞—Ç–µ–ª—å —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞! üöÄ\n"
        "–í—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ ‚Äî –≤—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç–µ!\n\n"
        "*–°–µ–≥–æ–¥–Ω—è —Å–Ω–æ–≤–∞ –≤–∞—à –¥–µ–Ω—å —Ç–≤–æ—Ä–∏—Ç—å –≤–µ–ª–∏–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω—ã!* üî•",
        parse_mode="Markdown",
        reply_markup=keyboard
    )

async def show_admins_list(message: types.Message) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    user_id = str(message.from_user.id)
    if int(user_id) != settings.MAIN_ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    logger.info(f"Admin {user_id} requested admins list")
    
    # TODO: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –ë–î
    # –í—Ä–µ–º–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    main_admin = {
        'id': settings.MAIN_ADMIN_ID,
        'first_name': message.from_user.first_name,
        'last_name': message.from_user.last_name or '',
        'username': message.from_user.username or '–Ω–µ—Ç',
        'level': 'üëº –ë–æ–≥ (–ì–ª. –∞–¥–º–∏–Ω) üôè'
    }
    
    text = "üë• *–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:*\n\n"
    text += f"‚Ä¢ {main_admin['first_name']} {main_admin['last_name']} (@{main_admin['username']})\n"
    text += f"  ‚îî ID: {main_admin['id']}\n"
    text += f"  ‚îî –£—Ä–æ–≤–µ–Ω—å: {main_admin['level']}\n"
    
    await message.answer(text, parse_mode="Markdown")

async def add_admin_prompt(message: types.Message) -> None:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    user_id = str(message.from_user.id)
    if int(user_id) != settings.MAIN_ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    logger.info(f"Admin {user_id} requested to add new admin")
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:"
    )
    # TODO: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID

async def remove_admin_prompt(message: types.Message) -> None:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    user_id = str(message.from_user.id)
    if int(user_id) != settings.MAIN_ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    logger.info(f"Admin {user_id} requested to remove admin")
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:"
    )
    # TODO: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID

async def edit_levels(message: types.Message) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    user_id = str(message.from_user.id)
    if int(user_id) != settings.MAIN_ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    logger.info(f"Admin {user_id} requested to edit levels")
    
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π
    await message.answer("–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

def register_admin_handlers(dp: Dispatcher) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
    
    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä –±–æ—Ç–∞
    """
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    dp.register_message_handler(cmd_admin, commands=["admin"])
    dp.register_message_handler(show_admins_list, lambda msg: msg.text == "üë• –°–ø–∏—Å–æ–∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
    dp.register_message_handler(add_admin_prompt, lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ê–¥–º–∏–Ω–∞")
    dp.register_message_handler(remove_admin_prompt, lambda msg: msg.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –ê–¥–º–∏–Ω–∞")
    dp.register_message_handler(edit_levels, lambda msg: msg.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –£—Ä–æ–≤–Ω–∏") 