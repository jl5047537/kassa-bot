"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—ç–∫–∞–ø–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞.
"""

import os
import shutil
import logging
import datetime
import zipfile
import hashlib
import asyncio
import json
from pathlib import Path
from typing import List, Optional, Dict, Any
from aiogram import Bot

from .backup_config import BACKUP_CONFIG
from .config import settings

logger = logging.getLogger(__name__)

class BackupManager:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—ç–∫–∞–ø–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞.
    """
    
    def __init__(self, bot: Optional[Bot] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±—ç–∫–∞–ø–æ–≤.
        
        Args:
            bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        self.backup_dir = Path("backups")
        self.backup_dir.mkdir(exist_ok=True)
        self.bot = bot
        self.config = BACKUP_CONFIG
        
    async def create_backup(self) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞.
        
        Returns:
            Dict[str, Any]: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –±—ç–∫–∞–ø–µ
        """
        try:
            start_time = datetime.datetime.now()
            
            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±—ç–∫–∞–ø–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
            timestamp = start_time.strftime("%Y%m%d_%H%M%S")
            backup_name = f"backup_{timestamp}.zip"
            backup_path = self.backup_dir / backup_name
            
            # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
            total_size = 0
            with zipfile.ZipFile(backup_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                for source_dir in self.config["source_dirs"]:
                    source_path = Path(source_dir)
                    if not source_path.exists():
                        logger.warning(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {source_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                        continue
                        
                    for root, dirs, files in os.walk(source_path):
                        # –ò—Å–∫–ª—é—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                        if self.config["exclude_dirs"]:
                            dirs[:] = [d for d in dirs if d not in self.config["exclude_dirs"]]
                            
                        # –ò—Å–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª—ã
                        if self.config["exclude_files"]:
                            files = [f for f in files if not any(f.endswith(ext) for ext in self.config["exclude_files"])]
                            
                        for file in files:
                            file_path = Path(root) / file
                            arcname = file_path.relative_to(source_path)
                            zipf.write(file_path, arcname)
                            total_size += file_path.stat().st_size
                            
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É
            with open(backup_path, 'rb') as f:
                checksum = hashlib.md5(f.read()).hexdigest()
                
            # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –±—ç–∫–∞–ø–∞
            backup_info = {
                "path": str(backup_path),
                "size": total_size,
                "checksum": checksum,
                "created_at": start_time,
                "duration": (datetime.datetime.now() - start_time).total_seconds()
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            self._save_metadata(backup_info)
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã
            self.cleanup_old_backups()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self._send_notification(backup_info)
            
            logger.info(f"–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_path}")
            return backup_info
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {str(e)}")
            await self._send_error_notification(str(e))
            raise
            
    def _save_metadata(self, backup_info: Dict[str, Any]) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –±—ç–∫–∞–ø–∞.
        
        Args:
            backup_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—ç–∫–∞–ø–µ
        """
        metadata_path = self.backup_dir / "metadata.json"
        metadata = []
        
        if metadata_path.exists():
            with open(metadata_path, 'r') as f:
                metadata = json.load(f)
                
        metadata.append(backup_info)
        
        with open(metadata_path, 'w') as f:
            json.dump(metadata, f, default=str)
            
    async def _send_notification(self, backup_info: Dict[str, Any]) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±—ç–∫–∞–ø–µ.
        
        Args:
            backup_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—ç–∫–∞–ø–µ
        """
        if not self.bot or not self.config["notifications"]["enabled"]:
            return
            
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ chat_id
            if not self.config["notifications"].get("chat_id"):
                logger.error("Chat_id is empty")
                return
                
            message = (
                f"‚úÖ –ë—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω\n"
                f"üìÖ –î–∞—Ç–∞: {backup_info['created_at']}\n"
                f"üì¶ –†–∞–∑–º–µ—Ä: {backup_info['size'] / 1024 / 1024:.2f} MB\n"
                f"‚è± –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {backup_info['duration']:.2f} —Å–µ–∫\n"
                f"üîç –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞: {backup_info['checksum']}"
            )
            
            await self.bot.send_message(
                chat_id=self.config["notifications"]["chat_id"],
                text=message
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
            
    async def _send_error_notification(self, error: str) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ.
        
        Args:
            error: –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
        """
        if not self.bot or not self.config["notifications"]["enabled"]:
            return
            
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ chat_id
            if not self.config["notifications"].get("chat_id"):
                logger.error("Chat_id is empty")
                return
                
            message = (
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞\n"
                f"üìÖ –î–∞—Ç–∞: {datetime.datetime.now()}\n"
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {error}"
            )
            
            await self.bot.send_message(
                chat_id=self.config["notifications"]["chat_id"],
                text=message
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {str(e)}")
            
    def cleanup_old_backups(self) -> None:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤.
        """
        try:
            backups = self.list_backups()
            if len(backups) > self.config["schedule"]["keep_last"]:
                for backup_path in backups[self.config["schedule"]["keep_last"]:]:
                    self.delete_backup(backup_path)
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ {len(backups) - self.config['schedule']['keep_last']} —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤: {str(e)}")
            raise
            
    def list_backups(self) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤.
        
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –±—ç–∫–∞–ø–∞–º
        """
        try:
            backups = []
            for file in self.backup_dir.glob("backup_*.zip"):
                backups.append(str(file))
            return sorted(backups, reverse=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±—ç–∫–∞–ø–æ–≤: {str(e)}")
            raise
            
    def restore_backup(self, backup_path: str, target_dir: Optional[str] = None, 
                      files: Optional[List[str]] = None) -> None:
        """
        –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞.
        
        Args:
            backup_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±—ç–∫–∞–ø–∞
            target_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            files: –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
            backup_file = Path(backup_path)
            if not backup_file.exists():
                raise FileNotFoundError(f"–ë—ç–∫–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω: {backup_path}")
                
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            target_path = Path(target_dir or self.config["restore"]["default_target"])
            target_path.mkdir(exist_ok=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
            if self.config["restore"]["verify_integrity"]:
                self._verify_backup(backup_path)
                
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã
            with zipfile.ZipFile(backup_path, 'r') as zipf:
                if files:
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                    for file in files:
                        if file in zipf.namelist():
                            zipf.extract(file, target_path)
                else:
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
                    zipf.extractall(target_path)
                    
            logger.info(f"–ë—ç–∫–∞–ø –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ {target_path}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {str(e)}")
            raise
            
    def _verify_backup(self, backup_path: str) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±—ç–∫–∞–ø–∞.
        
        Args:
            backup_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±—ç–∫–∞–ø–∞
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º ZIP –∞—Ä—Ö–∏–≤–æ–º
            with zipfile.ZipFile(backup_path, 'r') as zipf:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
                for file in zipf.namelist():
                    zipf.getinfo(file)
                    
            logger.info(f"–¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –±—ç–∫–∞–ø–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: {backup_path}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±—ç–∫–∞–ø–∞: {str(e)}")
            raise
            
    def delete_backup(self, backup_path: str) -> None:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–∞.
        
        Args:
            backup_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±—ç–∫–∞–ø–∞
        """
        try:
            backup_file = Path(backup_path)
            if backup_file.exists():
                backup_file.unlink()
                logger.info(f"–ë—ç–∫–∞–ø —É–¥–∞–ª–µ–Ω: {backup_path}")
            else:
                logger.warning(f"–ë—ç–∫–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω: {backup_path}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {str(e)}")
            raise 