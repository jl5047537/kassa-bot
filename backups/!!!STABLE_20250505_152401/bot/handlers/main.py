"""
–ú–æ–¥—É–ª—å –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
–°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
"""

import logging
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from typing import Optional
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

from ..core.config import settings
from ..keyboards.base import get_main_keyboard, get_registration_keyboard
from ..utils.validators import validate_field
from ..states.main import MainStates
from ..core.database import db
from ..constants.messages import (
    WELCOME, WELCOME_ADMIN, WELCOME_USER, ERROR_GENERAL,
    ERROR_NOT_FOUND, ERROR_RIGHTS, ERROR_INVALID_FORMAT,
    PHONE_VALIDATION_ERROR, PHONE_DUPLICATE_ERROR,
    REGISTRATION_SUCCESS, REGISTRATION_ERROR
)

logger = logging.getLogger(__name__)

async def start(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        is_admin = db.is_admin(message.from_user.id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if is_admin:
            await message.answer(
                WELCOME_ADMIN,
                reply_markup=get_main_keyboard(is_admin=True)
            )
        else:
            await message.answer(
                WELCOME_USER,
                reply_markup=get_main_keyboard(is_admin=False)
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: {str(e)}")
        await message.answer(
            ERROR_GENERAL,
            reply_markup=ReplyKeyboardRemove()
        )

async def help_command(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        is_admin = db.is_admin(message.from_user.id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–º–æ—â–∏
        help_text = (
            "ü§ñ *–ü–æ–º–æ—â—å*\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "/register - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
        )
        
        if is_admin:
            help_text += (
                "\n–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
                "/admin - –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n"
                "/users - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                "/add_user - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "/remove_user - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "/edit_user - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            )
            
        await message.answer(help_text, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /help: {str(e)}")
        await message.answer(
            ERROR_GENERAL,
            reply_markup=ReplyKeyboardRemove()
        )

async def register_prompt(message: types.Message) -> None:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    try:
        await message.answer(
            "üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
            reply_markup=ReplyKeyboardRemove()
        )
        await MainStates.waiting_for_phone.set()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
        await message.answer(
            ERROR_GENERAL,
            reply_markup=get_main_keyboard(is_admin=False)
        )

async def process_phone(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7 –∏–ª–∏ 8
        if not phone.startswith(('7', '8')):
            await message.answer(PHONE_VALIDATION_ERROR)
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–ª–∏–Ω—É
        if not phone.isdigit() or len(phone) != 11:
            await message.answer(PHONE_VALIDATION_ERROR)
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        existing_user = db.get_user_by_phone(phone)
        if existing_user:
            await message.answer(
                PHONE_DUPLICATE_ERROR.format(level=existing_user.level)
            )
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(phone=phone)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
        await message.answer(
            "üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
            reply_markup=ReplyKeyboardRemove()
        )
        await MainStates.waiting_for_name.set()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {str(e)}")
        await message.answer(
            ERROR_GENERAL,
            reply_markup=get_main_keyboard(is_admin=False)
        )
        await state.finish()

async def process_name(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏
        name = message.text.strip()
        if not name or len(name) < 2:
            await message.answer(
                "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
            )
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(name=name)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∞–º–∏–ª–∏—é
        await message.answer(
            "üë• –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:",
            reply_markup=ReplyKeyboardRemove()
        )
        await MainStates.waiting_for_surname.set()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏: {str(e)}")
        await message.answer(
            ERROR_GENERAL,
            reply_markup=get_main_keyboard(is_admin=False)
        )
        await state.finish()

async def process_surname(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ñ–∞–º–∏–ª–∏–∏.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–º–∏–ª–∏–∏
        surname = message.text.strip()
        if not surname or len(surname) < 2:
            await message.answer(
                "‚ùå –§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:"
            )
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        phone = data.get('phone')
        name = data.get('name')
        
        if not phone or not name:
            await message.answer(ERROR_NOT_FOUND)
            return
            
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        if db.add_user(phone, name, surname):
            await message.answer(
                REGISTRATION_SUCCESS.format(
                    name=name,
                    surname=surname,
                    phone=phone
                ),
                reply_markup=get_main_keyboard(is_admin=False)
            )
        else:
            await message.answer(
                REGISTRATION_ERROR,
                reply_markup=get_main_keyboard(is_admin=False)
            )
            
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏: {str(e)}")
        await message.answer(
            ERROR_GENERAL,
            reply_markup=get_main_keyboard(is_admin=False)
        )
        await state.finish() 