import sqlite3
import json
import time
import logging
import requests
from telegram.ext import Application, CommandHandler, CallbackContext
from telegram import Update
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN = "7844652385:AAGWn0XM3YiJF8hgfQ5yOomT4-sKYGGziuA"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
TON_API_KEY = "2c97cb20ca2b2cb03966f8252eb94d4f9b98ff0d8a253187557119d003d8f868"  # –¢–≤–æ–π API-–∫–ª—é—á TON
USER_CONFIG_FILE = "user_config.json"

# –§—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞
def normalize_address(address):
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å (0Q –∏–ª–∏ EQ) –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    if address.startswith("0Q") or address.startswith("EQ"):
        address = address[2:]
    # –ó–∞–º–µ–Ω—è–µ–º _ –Ω–∞ - –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Ä–∞–∑–ª–∏—á–∏—è
    address = address.replace("_", "-").lower()
    return address

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    with sqlite3.connect("kassa.db") as conn:
        c = conn.cursor()
        c.execute("""
            CREATE TABLE IF NOT EXISTS users (
                telegram_id TEXT PRIMARY KEY,
                level INTEGER DEFAULT 1,
                referrer_id TEXT,
                phone_number TEXT,
                ton_address TEXT,
                registration_timestamp INTEGER
            )
        """)
        c.execute("""
            CREATE TABLE IF NOT EXISTS payments (
                user_id TEXT,
                level INTEGER,
                transaction_hash TEXT,
                PRIMARY KEY (user_id, level)
            )
        """)
        # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π
        preset_users = [
            ("79363030567", 4, "+79363030567", "0QCT_wLTE_UC29vMlAMsXbjKfGIWvpmdmRZ_ChfPmA6KoWxt"),
            ("79683327001", 3, "+79683327001", "0QCZBUZX-u0GA0ryae-6r4yS0TfJSuA7EutuwSgSLs6_8wIB"),
            ("79684286626", 2, "+79684286626", "0QBbEep4YB5I7MB_6gAfplVR79wvUG8emX5xeuZU5G-z3N8o"),
            ("79253498238", 1, "+79253498238", "0QBrhBVaCW2xresjfQZAaLmuOJGcbPSgLmYzqUcdoF_juPiZ")
        ]
        for telegram_id, level, phone, address in preset_users:
            c.execute("INSERT OR IGNORE INTO users (telegram_id, level, phone_number, ton_address) VALUES (?, ?, ?, ?)",
                      (telegram_id, level, phone, address))
        conn.commit()
    logging.info("–ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –±–∞–∑—É")
    logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext):
    user_id = str(update.message.from_user.id)
    try:
        with sqlite3.connect("kassa.db") as conn:
            c = conn.cursor()
            c.execute("SELECT telegram_id FROM users WHERE telegram_id = ?", (user_id,))
            if c.fetchone():
                await update.message.reply_text("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status.")
                return
            referrer_id = context.args[0] if context.args else None
            if referrer_id:
                c.execute("SELECT telegram_id FROM users WHERE telegram_id = ?", (referrer_id,))
                if not c.fetchone():
                    referrer_id = None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º user_config.json –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
            phone_number = None
            ton_address = None
            logging.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º {USER_CONFIG_FILE} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            try:
                with open(USER_CONFIG_FILE, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    logging.info(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ {USER_CONFIG_FILE}: {json.dumps(config, ensure_ascii=False)}")
                    for user_data in config["users"]:
                        if user_data["telegram_id"] == user_id:
                            phone_number = user_data["phone_number"]
                            ton_address = user_data["ton_address"]
                            normalized_address = normalize_address(ton_address)
                            logging.info(f"–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {user_id}: phone={phone_number}, address={ton_address}, –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π: {normalized_address}")
                            break
                    else:
                        logging.info(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {USER_CONFIG_FILE}")
            except FileNotFoundError:
                logging.error(f"–§–∞–π–ª {USER_CONFIG_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            except json.JSONDecodeError as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {USER_CONFIG_FILE}: {e}")

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            c.execute("""
                INSERT INTO users (telegram_id, level, referrer_id, phone_number, ton_address, registration_timestamp)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (user_id, 5, referrer_id, phone_number, ton_address, int(time.time())))
            conn.commit()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if phone_number and ton_address:
            await update.message.reply_text(
                f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ \"–ö–∞—Å—Å–∞\", {user_id}!\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n"
                f"TON-–∞–¥—Ä–µ—Å: {ton_address}\n"
                "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç—è–Ω—É—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /pay –¥–ª—è —Å—Ç–∞—Ä—Ç–∞."
            )
        else:
            await update.message.reply_text(
                "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ \"–ö–∞—Å—Å–∞\"!\n1. –£–∫–∞–∂–∏—Ç–µ /set_phone\n2. –£–∫–∞–∂–∏—Ç–µ /set_address\n3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /pay –¥–ª—è —Å—Ç–∞—Ä—Ç–∞."
            )
        logging.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {user_id}: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ö–æ–º–∞–Ω–¥–∞ /pay
async def pay(update: Update, context: CallbackContext):
    user_id = str(update.message.from_user.id)
    try:
        with sqlite3.connect("kassa.db") as conn:
            c = conn.cursor()
            c.execute("SELECT telegram_id FROM users WHERE telegram_id = ?", (user_id,))
            if not c.fetchone():
                await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
                return

            # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã
            c.execute("SELECT phone_number, level, ton_address FROM users WHERE level BETWEEN 1 AND 4")
            recipients = c.fetchall()
            if not recipients:
                await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –¥–ª—è –æ–ø–ª–∞—Ç—ã.")
                return

            message = "üì± –ù–æ–º–µ—Ä–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã (–ø–æ 1 TON):\n"
            for i, (phone, level, address) in enumerate(recipients, 1):
                message += f"{i}. {phone} (—É—Ä–æ–≤–µ–Ω—å {level}) - {address}\n"
            message += "\n–Ø –≤—Å–µ –æ–ø–ª–∞—Ç–∏–ª /confirm_payment"
            await update.message.reply_text(message)
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ /pay –¥–ª—è {user_id}: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ö–æ–º–∞–Ω–¥–∞ /confirm_payment
async def confirm_payment(update: Update, context: CallbackContext):
    user_id = str(update.message.from_user.id)
    try:
        with sqlite3.connect("kassa.db") as conn:
            c = conn.cursor()
            c.execute("SELECT level FROM users WHERE telegram_id = ?", (user_id,))
            user_level = c.fetchone()
            if not user_level:
                await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
                return

            unpaid_levels = []
            for level in range(1, 5):
                c.execute("SELECT transaction_hash FROM payments WHERE user_id = ? AND level = ?", (user_id, level))
                if c.fetchone() is None:
                    unpaid_levels.append(level)

            if unpaid_levels:
                await update.message.reply_text(f"–í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å(–∏): {', '.join(map(str, unpaid_levels))}")
            else:
                c.execute("UPDATE users SET level = 5 WHERE telegram_id = ?", (user_id,))
                conn.commit()
                await update.message.reply_text("–í—Å–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã! –í–∞—à —É—Ä–æ–≤–µ–Ω—å: 5.")
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ confirm_payment –¥–ª—è {user_id}: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
async def monitor_transactions():
    try:
        with sqlite3.connect("kassa.db") as conn:
            c = conn.cursor()
            c.execute("SELECT telegram_id, ton_address FROM users")
            users = c.fetchall()

            for user_id, ton_address in users:
                normalized_user_address = normalize_address(ton_address)
                logging.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è {user_id}, –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å: {normalized_user_address}")

                for level in range(1, 5):
                    c.execute("SELECT ton_address FROM users WHERE level = ?", (level,))
                    recipient = c.fetchone()
                    if not recipient:
                        continue
                    recipient_address = recipient[0]

                    # –ó–∞–ø—Ä–æ—Å –∫ API TON
                    url = f"https://testnet.toncenter.com/api/v2/getTransactions?address={recipient_address}&limit=10&api_key={TON_API_KEY}"
                    response = requests.get(url)
                    logging.info(f"–ó–∞–ø—Ä–æ—Å –∫ API: {url}")
                    if response.status_code == 200:
                        logging.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ API: 200")
                        data = response.json()
                        logging.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç API: {json.dumps(data, ensure_ascii=False)}")
                        for tx in data["result"]:
                            source = tx["in_msg"]["source"]
                            normalized_source = normalize_address(source)
                            value = int(tx["in_msg"]["value"]) / 10**9  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ TON
                            tx_hash = tx["transaction_id"]["hash"]

                            if normalized_source == normalized_user_address and value >= 1.0:
                                logging.info(f"–í—Ö–æ–¥—è—â–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {tx_hash} –¥–ª—è {user_id} –Ω–∞ —É—Ä–æ–≤–µ–Ω—å {level}")
                                c.execute("SELECT transaction_hash FROM payments WHERE user_id = ? AND level = ?", (user_id, level))
                                if c.fetchone() is None:
                                    c.execute("INSERT INTO payments (user_id, level, transaction_hash) VALUES (?, ?, ?)", (user_id, level, tx_hash))
                                    conn.commit()
                                    logging.info(f"–û–ø–ª–∞—Ç–∞ —É—Ä–æ–≤–Ω—è {level} –∑–∞—Å—á–∏—Ç–∞–Ω–∞ –¥–ª—è {user_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ monitor_transactions: {e}")

# –û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    init_db()
    app = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("pay", pay))
    app.add_handler(CommandHandler("confirm_payment", confirm_payment))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler = AsyncIOScheduler()
    scheduler.add_job(monitor_transactions, 'interval', minutes=1)
    scheduler.start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    # –î–µ—Ä–∂–∏–º —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π –æ—Ç–∫—Ä—ã—Ç—ã–º
    try:
        await asyncio.Event().wait()
    except (KeyboardInterrupt, SystemExit):
        await app.stop()
        await app.shutdown()
        scheduler.shutdown()

if __name__ == "__main__":
    asyncio.run(main())